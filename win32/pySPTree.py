# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


"""

****************************************************************************
* pySPTree, version 0.2.0                                                  *
****************************************************************************

pySPTree is a Python-Wrapper for the C/C++ SPTree Solver Class from 
the University of Pisa.
SPTree is a Class that solves special variations of Minimum Cost Flow Problems
which are in fact shortest path (tree) problems (1 source node, many sink nodes, 
uncapacited arcs) very fast.

pySPTree is brought to you by
 Johannes Sommer, 2013
 G#.Blog: www.sommer-forst/blog
"""


from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pySPTree', [dirname(__file__)])
        except ImportError:
            import _pySPTree
            return _pySPTree
        if fp is not None:
            try:
                _mod = imp.load_module('_pySPTree', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pySPTree = swig_import_helper()
    del swig_import_helper
else:
    import _pySPTree
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class exception(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, exception, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, exception, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pySPTree.new_exception(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pySPTree.delete_exception
    __del__ = lambda self : None;
    def what(self): return _pySPTree.exception_what(self)
exception_swigregister = _pySPTree.exception_swigregister
exception_swigregister(exception)

def version():
	d = {}
	d["SPTree"] = "1.80"
	d["pySPTree"] = "0.2.0"
	return d


def new_darray(*args):
  return _pySPTree.new_darray(*args)
new_darray = _pySPTree.new_darray

def darray_get(*args):
  return _pySPTree.darray_get(*args)
darray_get = _pySPTree.darray_get

def darray_set(*args):
  return _pySPTree.darray_set(*args)
darray_set = _pySPTree.darray_set

def new_uiarray(*args):
  return _pySPTree.new_uiarray(*args)
new_uiarray = _pySPTree.new_uiarray

def uiarray_get(*args):
  return _pySPTree.uiarray_get(*args)
uiarray_get = _pySPTree.uiarray_get

def uiarray_set(*args):
  return _pySPTree.uiarray_set(*args)
uiarray_set = _pySPTree.uiarray_set
# Turn a Python list into a C double array
def CreateDoubleArrayFromList(l):
	d = new_darray(len(l))
	for i in range(0,len(l)):
		darray_set(d,i,l[i])
	return d
# Turn a Python list into a C unsigned int array
def CreateUIntArrayFromList(l):
	ui = new_uiarray(len(l))
	for i in range(0,len(l)):
		uiarray_set(ui,i,l[i])
	return ui
# Print out some elements of a double array
def PrintElements(a, first, last):
	for i in range(first,last):
		print darray_get(a,i)
		
# Print out some elements of an uint array
def PrintElements(a, first, last):
	for i in range(first,last):
		print uiarray_get(a,i)

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pySPTree.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _pySPTree.SwigPyIterator_value(self)
    def incr(self, n=1): return _pySPTree.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _pySPTree.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _pySPTree.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _pySPTree.SwigPyIterator_equal(self, *args)
    def copy(self): return _pySPTree.SwigPyIterator_copy(self)
    def next(self): return _pySPTree.SwigPyIterator_next(self)
    def __next__(self): return _pySPTree.SwigPyIterator___next__(self)
    def previous(self): return _pySPTree.SwigPyIterator_previous(self)
    def advance(self, *args): return _pySPTree.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _pySPTree.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _pySPTree.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _pySPTree.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _pySPTree.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _pySPTree.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _pySPTree.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _pySPTree.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class wstring(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wstring, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wstring, name)
    __repr__ = _swig_repr
    def length(self): return _pySPTree.wstring_length(self)
    def max_size(self): return _pySPTree.wstring_max_size(self)
    def capacity(self): return _pySPTree.wstring_capacity(self)
    def reserve(self, __res_arg=0): return _pySPTree.wstring_reserve(self, __res_arg)
    def copy(self, *args): return _pySPTree.wstring_copy(self, *args)
    def c_str(self): return _pySPTree.wstring_c_str(self)
    def find(self, *args): return _pySPTree.wstring_find(self, *args)
    def rfind(self, *args): return _pySPTree.wstring_rfind(self, *args)
    def find_first_of(self, *args): return _pySPTree.wstring_find_first_of(self, *args)
    def find_last_of(self, *args): return _pySPTree.wstring_find_last_of(self, *args)
    def find_first_not_of(self, *args): return _pySPTree.wstring_find_first_not_of(self, *args)
    def find_last_not_of(self, *args): return _pySPTree.wstring_find_last_not_of(self, *args)
    def substr(self, *args): return _pySPTree.wstring_substr(self, *args)
    def empty(self): return _pySPTree.wstring_empty(self)
    def size(self): return _pySPTree.wstring_size(self)
    def swap(self, *args): return _pySPTree.wstring_swap(self, *args)
    def get_allocator(self): return _pySPTree.wstring_get_allocator(self)
    def begin(self): return _pySPTree.wstring_begin(self)
    def end(self): return _pySPTree.wstring_end(self)
    def rbegin(self): return _pySPTree.wstring_rbegin(self)
    def rend(self): return _pySPTree.wstring_rend(self)
    def erase(self, *args): return _pySPTree.wstring_erase(self, *args)
    def __init__(self, *args): 
        this = _pySPTree.new_wstring(*args)
        try: self.this.append(this)
        except: self.this = this
    def assign(self, *args): return _pySPTree.wstring_assign(self, *args)
    def resize(self, *args): return _pySPTree.wstring_resize(self, *args)
    def iterator(self): return _pySPTree.wstring_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pySPTree.wstring___nonzero__(self)
    def __bool__(self): return _pySPTree.wstring___bool__(self)
    def __len__(self): return _pySPTree.wstring___len__(self)
    def __getslice__(self, *args): return _pySPTree.wstring___getslice__(self, *args)
    def __setslice__(self, *args): return _pySPTree.wstring___setslice__(self, *args)
    def __delslice__(self, *args): return _pySPTree.wstring___delslice__(self, *args)
    def __delitem__(self, *args): return _pySPTree.wstring___delitem__(self, *args)
    def __getitem__(self, *args): return _pySPTree.wstring___getitem__(self, *args)
    def __setitem__(self, *args): return _pySPTree.wstring___setitem__(self, *args)
    def insert(self, *args): return _pySPTree.wstring_insert(self, *args)
    def replace(self, *args): return _pySPTree.wstring_replace(self, *args)
    def __iadd__(self, *args): return _pySPTree.wstring___iadd__(self, *args)
    def __add__(self, *args): return _pySPTree.wstring___add__(self, *args)
    def __radd__(self, *args): return _pySPTree.wstring___radd__(self, *args)
    def __str__(self): return _pySPTree.wstring___str__(self)
    def __rlshift__(self, *args): return _pySPTree.wstring___rlshift__(self, *args)
    def __eq__(self, *args): return _pySPTree.wstring___eq__(self, *args)
    def __ne__(self, *args): return _pySPTree.wstring___ne__(self, *args)
    def __gt__(self, *args): return _pySPTree.wstring___gt__(self, *args)
    def __lt__(self, *args): return _pySPTree.wstring___lt__(self, *args)
    def __ge__(self, *args): return _pySPTree.wstring___ge__(self, *args)
    def __le__(self, *args): return _pySPTree.wstring___le__(self, *args)
    __swig_destroy__ = _pySPTree.delete_wstring
    __del__ = lambda self : None;
wstring_swigregister = _pySPTree.wstring_swigregister
wstring_swigregister(wstring)
cvar = _pySPTree.cvar
wstring.npos = _pySPTree.cvar.wstring_npos

class ios_base(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ios_base, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ios_base, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    erase_event = _pySPTree.ios_base_erase_event
    imbue_event = _pySPTree.ios_base_imbue_event
    copyfmt_event = _pySPTree.ios_base_copyfmt_event
    def register_callback(self, *args): return _pySPTree.ios_base_register_callback(self, *args)
    def flags(self, *args): return _pySPTree.ios_base_flags(self, *args)
    def setf(self, *args): return _pySPTree.ios_base_setf(self, *args)
    def unsetf(self, *args): return _pySPTree.ios_base_unsetf(self, *args)
    def precision(self, *args): return _pySPTree.ios_base_precision(self, *args)
    def width(self, *args): return _pySPTree.ios_base_width(self, *args)
    __swig_getmethods__["sync_with_stdio"] = lambda x: _pySPTree.ios_base_sync_with_stdio
    if _newclass:sync_with_stdio = staticmethod(_pySPTree.ios_base_sync_with_stdio)
    def imbue(self, *args): return _pySPTree.ios_base_imbue(self, *args)
    def getloc(self): return _pySPTree.ios_base_getloc(self)
    __swig_getmethods__["xalloc"] = lambda x: _pySPTree.ios_base_xalloc
    if _newclass:xalloc = staticmethod(_pySPTree.ios_base_xalloc)
    def iword(self, *args): return _pySPTree.ios_base_iword(self, *args)
    def pword(self, *args): return _pySPTree.ios_base_pword(self, *args)
    __swig_destroy__ = _pySPTree.delete_ios_base
    __del__ = lambda self : None;
ios_base_swigregister = _pySPTree.ios_base_swigregister
ios_base_swigregister(ios_base)
ios_base.boolalpha = _pySPTree.cvar.ios_base_boolalpha
ios_base.dec = _pySPTree.cvar.ios_base_dec
ios_base.fixed = _pySPTree.cvar.ios_base_fixed
ios_base.hex = _pySPTree.cvar.ios_base_hex
ios_base.internal = _pySPTree.cvar.ios_base_internal
ios_base.left = _pySPTree.cvar.ios_base_left
ios_base.oct = _pySPTree.cvar.ios_base_oct
ios_base.right = _pySPTree.cvar.ios_base_right
ios_base.scientific = _pySPTree.cvar.ios_base_scientific
ios_base.showbase = _pySPTree.cvar.ios_base_showbase
ios_base.showpoint = _pySPTree.cvar.ios_base_showpoint
ios_base.showpos = _pySPTree.cvar.ios_base_showpos
ios_base.skipws = _pySPTree.cvar.ios_base_skipws
ios_base.unitbuf = _pySPTree.cvar.ios_base_unitbuf
ios_base.uppercase = _pySPTree.cvar.ios_base_uppercase
ios_base.adjustfield = _pySPTree.cvar.ios_base_adjustfield
ios_base.basefield = _pySPTree.cvar.ios_base_basefield
ios_base.floatfield = _pySPTree.cvar.ios_base_floatfield
ios_base.badbit = _pySPTree.cvar.ios_base_badbit
ios_base.eofbit = _pySPTree.cvar.ios_base_eofbit
ios_base.failbit = _pySPTree.cvar.ios_base_failbit
ios_base.goodbit = _pySPTree.cvar.ios_base_goodbit
ios_base.app = _pySPTree.cvar.ios_base_app
ios_base.ate = _pySPTree.cvar.ios_base_ate
ios_base.binary = _pySPTree.cvar.ios_base_binary
ios_base.ios_base_in = _pySPTree.cvar.ios_base_ios_base_in
ios_base.out = _pySPTree.cvar.ios_base_out
ios_base.trunc = _pySPTree.cvar.ios_base_trunc
ios_base.beg = _pySPTree.cvar.ios_base_beg
ios_base.cur = _pySPTree.cvar.ios_base_cur
ios_base.end = _pySPTree.cvar.ios_base_end

def ios_base_sync_with_stdio(__sync=True):
  return _pySPTree.ios_base_sync_with_stdio(__sync)
ios_base_sync_with_stdio = _pySPTree.ios_base_sync_with_stdio

def ios_base_xalloc():
  return _pySPTree.ios_base_xalloc()
ios_base_xalloc = _pySPTree.ios_base_xalloc

class ios(ios_base):
    __swig_setmethods__ = {}
    for _s in [ios_base]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ios, name, value)
    __swig_getmethods__ = {}
    for _s in [ios_base]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ios, name)
    __repr__ = _swig_repr
    def rdstate(self): return _pySPTree.ios_rdstate(self)
    def clear(self, *args): return _pySPTree.ios_clear(self, *args)
    def setstate(self, *args): return _pySPTree.ios_setstate(self, *args)
    def good(self): return _pySPTree.ios_good(self)
    def eof(self): return _pySPTree.ios_eof(self)
    def fail(self): return _pySPTree.ios_fail(self)
    def bad(self): return _pySPTree.ios_bad(self)
    def exceptions(self, *args): return _pySPTree.ios_exceptions(self, *args)
    def __init__(self, *args): 
        this = _pySPTree.new_ios(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pySPTree.delete_ios
    __del__ = lambda self : None;
    def tie(self, *args): return _pySPTree.ios_tie(self, *args)
    def rdbuf(self, *args): return _pySPTree.ios_rdbuf(self, *args)
    def copyfmt(self, *args): return _pySPTree.ios_copyfmt(self, *args)
    def fill(self, *args): return _pySPTree.ios_fill(self, *args)
    def imbue(self, *args): return _pySPTree.ios_imbue(self, *args)
    def narrow(self, *args): return _pySPTree.ios_narrow(self, *args)
    def widen(self, *args): return _pySPTree.ios_widen(self, *args)
ios_swigregister = _pySPTree.ios_swigregister
ios_swigregister(ios)

class wios(ios_base):
    __swig_setmethods__ = {}
    for _s in [ios_base]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, wios, name, value)
    __swig_getmethods__ = {}
    for _s in [ios_base]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, wios, name)
    __repr__ = _swig_repr
    def rdstate(self): return _pySPTree.wios_rdstate(self)
    def clear(self, *args): return _pySPTree.wios_clear(self, *args)
    def setstate(self, *args): return _pySPTree.wios_setstate(self, *args)
    def good(self): return _pySPTree.wios_good(self)
    def eof(self): return _pySPTree.wios_eof(self)
    def fail(self): return _pySPTree.wios_fail(self)
    def bad(self): return _pySPTree.wios_bad(self)
    def exceptions(self, *args): return _pySPTree.wios_exceptions(self, *args)
    def __init__(self, *args): 
        this = _pySPTree.new_wios(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pySPTree.delete_wios
    __del__ = lambda self : None;
    def tie(self, *args): return _pySPTree.wios_tie(self, *args)
    def rdbuf(self, *args): return _pySPTree.wios_rdbuf(self, *args)
    def copyfmt(self, *args): return _pySPTree.wios_copyfmt(self, *args)
    def fill(self, *args): return _pySPTree.wios_fill(self, *args)
    def imbue(self, *args): return _pySPTree.wios_imbue(self, *args)
    def narrow(self, *args): return _pySPTree.wios_narrow(self, *args)
    def widen(self, *args): return _pySPTree.wios_widen(self, *args)
wios_swigregister = _pySPTree.wios_swigregister
wios_swigregister(wios)

class string(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, string, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, string, name)
    __repr__ = _swig_repr
    def length(self): return _pySPTree.string_length(self)
    def max_size(self): return _pySPTree.string_max_size(self)
    def capacity(self): return _pySPTree.string_capacity(self)
    def reserve(self, __res_arg=0): return _pySPTree.string_reserve(self, __res_arg)
    def copy(self, *args): return _pySPTree.string_copy(self, *args)
    def c_str(self): return _pySPTree.string_c_str(self)
    def find(self, *args): return _pySPTree.string_find(self, *args)
    def rfind(self, *args): return _pySPTree.string_rfind(self, *args)
    def find_first_of(self, *args): return _pySPTree.string_find_first_of(self, *args)
    def find_last_of(self, *args): return _pySPTree.string_find_last_of(self, *args)
    def find_first_not_of(self, *args): return _pySPTree.string_find_first_not_of(self, *args)
    def find_last_not_of(self, *args): return _pySPTree.string_find_last_not_of(self, *args)
    def substr(self, *args): return _pySPTree.string_substr(self, *args)
    def empty(self): return _pySPTree.string_empty(self)
    def size(self): return _pySPTree.string_size(self)
    def swap(self, *args): return _pySPTree.string_swap(self, *args)
    def get_allocator(self): return _pySPTree.string_get_allocator(self)
    def begin(self): return _pySPTree.string_begin(self)
    def end(self): return _pySPTree.string_end(self)
    def rbegin(self): return _pySPTree.string_rbegin(self)
    def rend(self): return _pySPTree.string_rend(self)
    def erase(self, *args): return _pySPTree.string_erase(self, *args)
    def __init__(self, *args): 
        this = _pySPTree.new_string(*args)
        try: self.this.append(this)
        except: self.this = this
    def assign(self, *args): return _pySPTree.string_assign(self, *args)
    def resize(self, *args): return _pySPTree.string_resize(self, *args)
    def iterator(self): return _pySPTree.string_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pySPTree.string___nonzero__(self)
    def __bool__(self): return _pySPTree.string___bool__(self)
    def __len__(self): return _pySPTree.string___len__(self)
    def __getslice__(self, *args): return _pySPTree.string___getslice__(self, *args)
    def __setslice__(self, *args): return _pySPTree.string___setslice__(self, *args)
    def __delslice__(self, *args): return _pySPTree.string___delslice__(self, *args)
    def __delitem__(self, *args): return _pySPTree.string___delitem__(self, *args)
    def __getitem__(self, *args): return _pySPTree.string___getitem__(self, *args)
    def __setitem__(self, *args): return _pySPTree.string___setitem__(self, *args)
    def insert(self, *args): return _pySPTree.string_insert(self, *args)
    def replace(self, *args): return _pySPTree.string_replace(self, *args)
    def __iadd__(self, *args): return _pySPTree.string___iadd__(self, *args)
    def __add__(self, *args): return _pySPTree.string___add__(self, *args)
    def __radd__(self, *args): return _pySPTree.string___radd__(self, *args)
    def __str__(self): return _pySPTree.string___str__(self)
    def __rlshift__(self, *args): return _pySPTree.string___rlshift__(self, *args)
    def __eq__(self, *args): return _pySPTree.string___eq__(self, *args)
    def __ne__(self, *args): return _pySPTree.string___ne__(self, *args)
    def __gt__(self, *args): return _pySPTree.string___gt__(self, *args)
    def __lt__(self, *args): return _pySPTree.string___lt__(self, *args)
    def __ge__(self, *args): return _pySPTree.string___ge__(self, *args)
    def __le__(self, *args): return _pySPTree.string___le__(self, *args)
    __swig_destroy__ = _pySPTree.delete_string
    __del__ = lambda self : None;
string_swigregister = _pySPTree.string_swigregister
string_swigregister(string)
string.npos = _pySPTree.cvar.string_npos

class ostream(ios):
    __swig_setmethods__ = {}
    for _s in [ios]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ostream, name, value)
    __swig_getmethods__ = {}
    for _s in [ios]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ostream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pySPTree.new_ostream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pySPTree.delete_ostream
    __del__ = lambda self : None;
    def __lshift__(self, *args): return _pySPTree.ostream___lshift__(self, *args)
    def put(self, *args): return _pySPTree.ostream_put(self, *args)
    def write(self, *args): return _pySPTree.ostream_write(self, *args)
    def flush(self): return _pySPTree.ostream_flush(self)
    def tellp(self): return _pySPTree.ostream_tellp(self)
    def seekp(self, *args): return _pySPTree.ostream_seekp(self, *args)
ostream_swigregister = _pySPTree.ostream_swigregister
ostream_swigregister(ostream)
cin = cvar.cin
cout = cvar.cout
cerr = cvar.cerr
clog = cvar.clog
wcin = cvar.wcin
wcout = cvar.wcout
wcerr = cvar.wcerr
wclog = cvar.wclog

class istream(ios):
    __swig_setmethods__ = {}
    for _s in [ios]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, istream, name, value)
    __swig_getmethods__ = {}
    for _s in [ios]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, istream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pySPTree.new_istream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pySPTree.delete_istream
    __del__ = lambda self : None;
    def __rshift__(self, *args): return _pySPTree.istream___rshift__(self, *args)
    def gcount(self): return _pySPTree.istream_gcount(self)
    def get(self, *args): return _pySPTree.istream_get(self, *args)
    def getline(self, *args): return _pySPTree.istream_getline(self, *args)
    def ignore(self, *args): return _pySPTree.istream_ignore(self, *args)
    def peek(self): return _pySPTree.istream_peek(self)
    def read(self, *args): return _pySPTree.istream_read(self, *args)
    def readsome(self, *args): return _pySPTree.istream_readsome(self, *args)
    def putback(self, *args): return _pySPTree.istream_putback(self, *args)
    def unget(self): return _pySPTree.istream_unget(self)
    def sync(self): return _pySPTree.istream_sync(self)
    def tellg(self): return _pySPTree.istream_tellg(self)
    def seekg(self, *args): return _pySPTree.istream_seekg(self, *args)
istream_swigregister = _pySPTree.istream_swigregister
istream_swigregister(istream)

class iostream(istream,ostream):
    __swig_setmethods__ = {}
    for _s in [istream,ostream]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, iostream, name, value)
    __swig_getmethods__ = {}
    for _s in [istream,ostream]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, iostream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pySPTree.new_iostream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pySPTree.delete_iostream
    __del__ = lambda self : None;
iostream_swigregister = _pySPTree.iostream_swigregister
iostream_swigregister(iostream)

endl_cb_ptr = _pySPTree.endl_cb_ptr

def endl(*args):
  return _pySPTree.endl(*args)
endl = _pySPTree.endl
ends_cb_ptr = _pySPTree.ends_cb_ptr

def ends(*args):
  return _pySPTree.ends(*args)
ends = _pySPTree.ends
flush_cb_ptr = _pySPTree.flush_cb_ptr

def flush(*args):
  return _pySPTree.flush(*args)
flush = _pySPTree.flush
class wostream(wios):
    __swig_setmethods__ = {}
    for _s in [wios]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, wostream, name, value)
    __swig_getmethods__ = {}
    for _s in [wios]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, wostream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pySPTree.new_wostream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pySPTree.delete_wostream
    __del__ = lambda self : None;
    def __lshift__(self, *args): return _pySPTree.wostream___lshift__(self, *args)
    def put(self, *args): return _pySPTree.wostream_put(self, *args)
    def write(self, *args): return _pySPTree.wostream_write(self, *args)
    def flush(self): return _pySPTree.wostream_flush(self)
    def tellp(self): return _pySPTree.wostream_tellp(self)
    def seekp(self, *args): return _pySPTree.wostream_seekp(self, *args)
wostream_swigregister = _pySPTree.wostream_swigregister
wostream_swigregister(wostream)

class wistream(wios):
    __swig_setmethods__ = {}
    for _s in [wios]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, wistream, name, value)
    __swig_getmethods__ = {}
    for _s in [wios]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, wistream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pySPTree.new_wistream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pySPTree.delete_wistream
    __del__ = lambda self : None;
    def __rshift__(self, *args): return _pySPTree.wistream___rshift__(self, *args)
    def gcount(self): return _pySPTree.wistream_gcount(self)
    def get(self, *args): return _pySPTree.wistream_get(self, *args)
    def getline(self, *args): return _pySPTree.wistream_getline(self, *args)
    def ignore(self, *args): return _pySPTree.wistream_ignore(self, *args)
    def peek(self): return _pySPTree.wistream_peek(self)
    def read(self, *args): return _pySPTree.wistream_read(self, *args)
    def readsome(self, *args): return _pySPTree.wistream_readsome(self, *args)
    def putback(self, *args): return _pySPTree.wistream_putback(self, *args)
    def unget(self): return _pySPTree.wistream_unget(self)
    def sync(self): return _pySPTree.wistream_sync(self)
    def tellg(self): return _pySPTree.wistream_tellg(self)
    def seekg(self, *args): return _pySPTree.wistream_seekg(self, *args)
wistream_swigregister = _pySPTree.wistream_swigregister
wistream_swigregister(wistream)

class wiostream(wistream,wostream):
    __swig_setmethods__ = {}
    for _s in [wistream,wostream]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, wiostream, name, value)
    __swig_getmethods__ = {}
    for _s in [wistream,wostream]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, wiostream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pySPTree.new_wiostream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pySPTree.delete_wiostream
    __del__ = lambda self : None;
wiostream_swigregister = _pySPTree.wiostream_swigregister
wiostream_swigregister(wiostream)

wendl_cb_ptr = _pySPTree.wendl_cb_ptr

def wendl(*args):
  return _pySPTree.wendl(*args)
wendl = _pySPTree.wendl
wends_cb_ptr = _pySPTree.wends_cb_ptr

def wends(*args):
  return _pySPTree.wends(*args)
wends = _pySPTree.wends
wflush_cb_ptr = _pySPTree.wflush_cb_ptr

def wflush(*args):
  return _pySPTree.wflush(*args)
wflush = _pySPTree.wflush
USENAME0 = _pySPTree.USENAME0
class MCFException(exception):
    __swig_setmethods__ = {}
    for _s in [exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCFException, name, value)
    __swig_getmethods__ = {}
    for _s in [exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MCFException, name)
    __repr__ = _swig_repr
    def __init__(self, msg=None): 
        this = _pySPTree.new_MCFException(msg)
        try: self.this.append(this)
        except: self.this = this
    def what(self): return _pySPTree.MCFException_what(self)
    __swig_destroy__ = _pySPTree.delete_MCFException
    __del__ = lambda self : None;
MCFException_swigregister = _pySPTree.MCFException_swigregister
MCFException_swigregister(MCFException)

class MCFState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCFState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MCFState, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pySPTree.new_MCFState()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pySPTree.delete_MCFState
    __del__ = lambda self : None;
MCFState_swigregister = _pySPTree.MCFState_swigregister
MCFState_swigregister(MCFState)

class MCFClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCFClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MCFClass, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    kMaxTime = _pySPTree.MCFClass_kMaxTime
    kMaxIter = _pySPTree.MCFClass_kMaxIter
    kEpsFlw = _pySPTree.MCFClass_kEpsFlw
    kEpsDfct = _pySPTree.MCFClass_kEpsDfct
    kEpsCst = _pySPTree.MCFClass_kEpsCst
    kReopt = _pySPTree.MCFClass_kReopt
    kLastParam = _pySPTree.MCFClass_kLastParam
    kUnSolved = _pySPTree.MCFClass_kUnSolved
    kOK = _pySPTree.MCFClass_kOK
    kStopped = _pySPTree.MCFClass_kStopped
    kUnfeasible = _pySPTree.MCFClass_kUnfeasible
    kUnbounded = _pySPTree.MCFClass_kUnbounded
    kError = _pySPTree.MCFClass_kError
    kNo = _pySPTree.MCFClass_kNo
    kYes = _pySPTree.MCFClass_kYes
    kDimacs = _pySPTree.MCFClass_kDimacs
    kQDimacs = _pySPTree.MCFClass_kQDimacs
    kMPS = _pySPTree.MCFClass_kMPS
    kFWMPS = _pySPTree.MCFClass_kFWMPS
    def LoadNet(self, nmx=0, mmx=0, pn=0, pm=0, pU=0, pC=0, pDfct=0, pSn=0, pEn=0): return _pySPTree.MCFClass_LoadNet(self, nmx, mmx, pn, pm, pU, pC, pDfct, pSn, pEn)
    def LoadDMX(self, *args): return _pySPTree.MCFClass_LoadDMX(self, *args)
    def PreProcess(self): return _pySPTree.MCFClass_PreProcess(self)
    def SetPar(self, *args): return _pySPTree.MCFClass_SetPar(self, *args)
    def GetPar(self, *args): return _pySPTree.MCFClass_GetPar(self, *args)
    def SetMCFTime(self, TimeIt=True): return _pySPTree.MCFClass_SetMCFTime(self, TimeIt)
    def SolveMCF(self): return _pySPTree.MCFClass_SolveMCF(self)
    def MCFGetStatus(self): return _pySPTree.MCFClass_MCFGetStatus(self)
    def MCFGetX(self, *args): return _pySPTree.MCFClass_MCFGetX(self, *args)
    def HaveNewX(self): return _pySPTree.MCFClass_HaveNewX(self)
    def MCFGetPi(self, *args): return _pySPTree.MCFClass_MCFGetPi(self, *args)
    def HaveNewPi(self): return _pySPTree.MCFClass_HaveNewPi(self)
    def MCFGetRC(self, *args): return _pySPTree.MCFClass_MCFGetRC(self, *args)
    def MCFGetFO(self): return _pySPTree.MCFClass_MCFGetFO(self)
    def MCFGetDFO(self): return _pySPTree.MCFClass_MCFGetDFO(self)
    def MCFGetUnfCut(self, *args): return _pySPTree.MCFClass_MCFGetUnfCut(self, *args)
    def MCFGetUnbCycl(self, *args): return _pySPTree.MCFClass_MCFGetUnbCycl(self, *args)
    def TimeMCF(self, *args): return _pySPTree.MCFClass_TimeMCF(self, *args)
    def CheckPSol(self): return _pySPTree.MCFClass_CheckPSol(self)
    def CheckDSol(self): return _pySPTree.MCFClass_CheckDSol(self)
    def MCFnmax(self): return _pySPTree.MCFClass_MCFnmax(self)
    def MCFmmax(self): return _pySPTree.MCFClass_MCFmmax(self)
    def MCFn(self): return _pySPTree.MCFClass_MCFn(self)
    def MCFm(self): return _pySPTree.MCFClass_MCFm(self)
    def MCFArcs(self, *args): return _pySPTree.MCFClass_MCFArcs(self, *args)
    def MCFSNde(self, *args): return _pySPTree.MCFClass_MCFSNde(self, *args)
    def MCFENde(self, *args): return _pySPTree.MCFClass_MCFENde(self, *args)
    def MCFCosts(self, *args): return _pySPTree.MCFClass_MCFCosts(self, *args)
    def MCFCost(self, *args): return _pySPTree.MCFClass_MCFCost(self, *args)
    def MCFQCoef(self, *args): return _pySPTree.MCFClass_MCFQCoef(self, *args)
    def MCFUCaps(self, *args): return _pySPTree.MCFClass_MCFUCaps(self, *args)
    def MCFUCap(self, *args): return _pySPTree.MCFClass_MCFUCap(self, *args)
    def MCFDfcts(self, *args): return _pySPTree.MCFClass_MCFDfcts(self, *args)
    def MCFDfct(self, *args): return _pySPTree.MCFClass_MCFDfct(self, *args)
    def ChgCosts(self, *args): return _pySPTree.MCFClass_ChgCosts(self, *args)
    def ChgCost(self, *args): return _pySPTree.MCFClass_ChgCost(self, *args)
    def ChgQCoef(self, *args): return _pySPTree.MCFClass_ChgQCoef(self, *args)
    def ChgUCaps(self, *args): return _pySPTree.MCFClass_ChgUCaps(self, *args)
    def ChgUCap(self, *args): return _pySPTree.MCFClass_ChgUCap(self, *args)
    def ChgDfcts(self, *args): return _pySPTree.MCFClass_ChgDfcts(self, *args)
    def ChgDfct(self, *args): return _pySPTree.MCFClass_ChgDfct(self, *args)
    def CloseArc(self, *args): return _pySPTree.MCFClass_CloseArc(self, *args)
    def IsClosedArc(self, *args): return _pySPTree.MCFClass_IsClosedArc(self, *args)
    def DelNode(self, *args): return _pySPTree.MCFClass_DelNode(self, *args)
    def OpenArc(self, *args): return _pySPTree.MCFClass_OpenArc(self, *args)
    def AddNode(self, *args): return _pySPTree.MCFClass_AddNode(self, *args)
    def ChangeArc(self, *args): return _pySPTree.MCFClass_ChangeArc(self, *args)
    def DelArc(self, *args): return _pySPTree.MCFClass_DelArc(self, *args)
    def IsDeletedArc(self, *args): return _pySPTree.MCFClass_IsDeletedArc(self, *args)
    def AddArc(self, *args): return _pySPTree.MCFClass_AddArc(self, *args)
    __swig_destroy__ = _pySPTree.delete_MCFClass
    __del__ = lambda self : None;
MCFClass_swigregister = _pySPTree.MCFClass_swigregister
MCFClass_swigregister(MCFClass)

SPT_ALGRTM = _pySPTree.SPT_ALGRTM
LABEL_SETTING = _pySPTree.LABEL_SETTING
SPT_STRTN = _pySPTree.SPT_STRTN
ORDRD_NMS = _pySPTree.ORDRD_NMS
SAME_GRPH_SPT = _pySPTree.SAME_GRPH_SPT
DYNMC_MCF_SPT = _pySPTree.DYNMC_MCF_SPT
class SPTree(MCFClass):
    __swig_setmethods__ = {}
    for _s in [MCFClass]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SPTree, name, value)
    __swig_getmethods__ = {}
    for _s in [MCFClass]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SPTree, name)
    __repr__ = _swig_repr
    def __init__(self, nmx=0, mmx=0, Drctd=True): 
        this = _pySPTree.new_SPTree(nmx, mmx, Drctd)
        try: self.this.append(this)
        except: self.this = this
    def LoadNet(self, nmx=0, mmx=0, pn=0, pm=0, pU=0, pC=0, pDfct=0, pSn=0, pEn=0): return _pySPTree.SPTree_LoadNet(self, nmx, mmx, pn, pm, pU, pC, pDfct, pSn, pEn)
    def SolveMCF(self): return _pySPTree.SPTree_SolveMCF(self)
    def MCFGetX(self, *args): return _pySPTree.SPTree_MCFGetX(self, *args)
    def MCFGetRC(self, *args): return _pySPTree.SPTree_MCFGetRC(self, *args)
    def MCFGetPi(self, *args): return _pySPTree.SPTree_MCFGetPi(self, *args)
    def MCFArcs(self, *args): return _pySPTree.SPTree_MCFArcs(self, *args)
    def MCFSNde(self, *args): return _pySPTree.SPTree_MCFSNde(self, *args)
    def MCFENde(self, *args): return _pySPTree.SPTree_MCFENde(self, *args)
    def MCFCosts(self, *args): return _pySPTree.SPTree_MCFCosts(self, *args)
    def MCFCost(self, *args): return _pySPTree.SPTree_MCFCost(self, *args)
    def MCFUCaps(self, *args): return _pySPTree.SPTree_MCFUCaps(self, *args)
    def MCFUCap(self, *args): return _pySPTree.SPTree_MCFUCap(self, *args)
    def MCFDfcts(self, *args): return _pySPTree.SPTree_MCFDfcts(self, *args)
    def MCFDfct(self, *args): return _pySPTree.SPTree_MCFDfct(self, *args)
    def ChgCosts(self, *args): return _pySPTree.SPTree_ChgCosts(self, *args)
    def ChgCost(self, *args): return _pySPTree.SPTree_ChgCost(self, *args)
    def ChgDfcts(self, *args): return _pySPTree.SPTree_ChgDfcts(self, *args)
    def ChgDfct(self, *args): return _pySPTree.SPTree_ChgDfct(self, *args)
    def ChgUCaps(self, *args): return _pySPTree.SPTree_ChgUCaps(self, *args)
    def ChgUCap(self, *args): return _pySPTree.SPTree_ChgUCap(self, *args)
    def CloseArc(self, *args): return _pySPTree.SPTree_CloseArc(self, *args)
    def IsClosedArc(self, *args): return _pySPTree.SPTree_IsClosedArc(self, *args)
    def DelNode(self, *args): return _pySPTree.SPTree_DelNode(self, *args)
    def OpenArc(self, *args): return _pySPTree.SPTree_OpenArc(self, *args)
    def AddNode(self, *args): return _pySPTree.SPTree_AddNode(self, *args)
    def ChangeArc(self, *args): return _pySPTree.SPTree_ChangeArc(self, *args)
    def DelArc(self, *args): return _pySPTree.SPTree_DelArc(self, *args)
    def IsDeletedArc(self, *args): return _pySPTree.SPTree_IsDeletedArc(self, *args)
    def AddArc(self, *args): return _pySPTree.SPTree_AddArc(self, *args)
    def ShortestPathTree(self): return _pySPTree.SPTree_ShortestPathTree(self)
    def SetOrigin(self, *args): return _pySPTree.SPTree_SetOrigin(self, *args)
    def SetDest(self, *args): return _pySPTree.SPTree_SetDest(self, *args)
    def MCFGetFO(self, *args): return _pySPTree.SPTree_MCFGetFO(self, *args)
    def Reached(self, *args): return _pySPTree.SPTree_Reached(self, *args)
    def Predecessors(self): return _pySPTree.SPTree_Predecessors(self)
    def ArcPredecessors(self): return _pySPTree.SPTree_ArcPredecessors(self)
    def DestN(self): return _pySPTree.SPTree_DestN(self)
    def Dests(self): return _pySPTree.SPTree_Dests(self)
    __swig_destroy__ = _pySPTree.delete_SPTree
    __del__ = lambda self : None;
SPTree_swigregister = _pySPTree.SPTree_swigregister
SPTree_swigregister(SPTree)

# This file is compatible with both classic and new-style classes.


